generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  cpf          String
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens       UserToken[]
  invites      Invite[]
  member_on    Member[]
  owns_schools School[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model UserToken {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("user_tokens")
}

model StudentToken {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")

  @@map("student_tokens")
}

enum Role {
  ADMIN
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @map("school_id")

  @@unique([email, schoolId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @map("school_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([schoolId, userId])
  @@map("members")
}

model School {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  city                      String?
  state                     String?
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  logoUrl                   String?  @map("logo_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  classes  Class[]
  students Student[]
  awards   Award[]
  invites  Invite[]
  members  Member[]
  settings SchoolSettings[]

  @@map("schools")
}

model SchoolSettings {
  id              String @id @default(uuid())
  lastStudentCode Int    @default(0) @map("last_student_code")

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @unique @map("school_id")

  @@map("school_settings")
}

model Class {
  id        String   @id @default(uuid())
  name      String
  year      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @map("school_id")

  students Student[]

  @@map("classes")
}

model Student {
  id           String   @id @default(uuid())
  code         Int
  name         String
  cpf          String?  @unique
  email        String?  @unique
  passwordHash String   @map("password_hash")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @map("school_id")

  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String @map("class_id")

  points Point[]
  tokens StudentToken[]

  @@unique([code, schoolId])
  @@map("students")
}

model Point {
  id        String   @id @default(uuid())
  amount    Int
  createdAt DateTime @default(now()) @map("created_at")

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")

  @@map("points")
}

model Award {
  id          String   @id @default(uuid())
  name        String
  description String?
  value       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String @map("school_id")

  @@map("awards")
}
